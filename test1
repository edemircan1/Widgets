/** @jsx jsx */
import {
React,
jsx,
AllWidgetProps,
css,
SerializedStyles,
IMState,
ReactResizeDetector,
lodash
} from ‚Äòjimu-core‚Äô
import { JimuMapViewComponent, JimuMapView } from ‚Äòjimu-arcgis‚Äô
import {
Button,
Icon,
Popper,
TextInput,
Select,
Option,
Alert
} from ‚Äòjimu-ui‚Äô
import Point from ‚Äòesri/geometry/Point‚Äô
import Graphic from ‚Äòesri/Graphic‚Äô
import SimpleMarkerSymbol from ‚Äòesri/symbols/SimpleMarkerSymbol‚Äô
import GraphicsLayer from ‚Äòesri/layers/GraphicsLayer‚Äô
import PopupTemplate from ‚Äòesri/PopupTemplate‚Äô

interface Config {
useMapWidget: string
}

interface WidgetState {
jimuMapView: JimuMapView
isDropMode: boolean
selectedPin: any
showPopup: boolean
popupPosition: { x: number; y: number }
pinData: {
id: string
name: string
lat: number
lng: number
color: string
}
graphicsLayer: GraphicsLayer
}

export default class DropPinWidget extends React.PureComponent<
AllWidgetProps<Config>,
WidgetState

> {
> private mapClickHandler: any = null
> private pinCounter: number = 0
> private availableColors = [
> { value: ‚Äò#FF0000‚Äô, label: ‚ÄòRed‚Äô },
> { value: ‚Äò#00FF00‚Äô, label: ‚ÄòGreen‚Äô },
> { value: ‚Äò#0000FF‚Äô, label: ‚ÄòBlue‚Äô },
> { value: ‚Äò#FFFF00‚Äô, label: ‚ÄòYellow‚Äô },
> { value: ‚Äò#FF00FF‚Äô, label: ‚ÄòMagenta‚Äô },
> { value: ‚Äò#00FFFF‚Äô, label: ‚ÄòCyan‚Äô },
> { value: ‚Äò#FFA500‚Äô, label: ‚ÄòOrange‚Äô },
> { value: ‚Äò#800080‚Äô, label: ‚ÄòPurple‚Äô }
> ]

constructor(props: AllWidgetProps<Config>) {
super(props)

```
this.state = {
  jimuMapView: null,
  isDropMode: false,
  selectedPin: null,
  showPopup: false,
  popupPosition: { x: 0, y: 0 },
  pinData: {
    id: '',
    name: '',
    lat: 0,
    lng: 0,
    color: '#FF0000'
  },
  graphicsLayer: null
}
```

}

componentDidMount() {
// Create graphics layer for pins
const graphicsLayer = new GraphicsLayer({
id: ‚Äòdrop-pin-layer‚Äô,
title: ‚ÄòDropped Pins‚Äô
})

```
this.setState({ graphicsLayer })
```

}

componentWillUnmount() {
this.removeMapClickHandler()
}

onActiveViewChange = (jimuMapView: JimuMapView) => {
if (jimuMapView) {
this.setState({ jimuMapView }, () => {
// Add graphics layer to map
if (this.state.graphicsLayer) {
jimuMapView.view.map.add(this.state.graphicsLayer)
}
})
}
}

toggleDropMode = () => {
const { isDropMode, jimuMapView } = this.state

```
if (!isDropMode) {
  // Enable drop mode
  this.setState({ isDropMode: true })
  this.addMapClickHandler()
  
  // Change cursor to crosshair
  if (jimuMapView?.view?.container) {
    jimuMapView.view.container.style.cursor = 'crosshair'
  }
} else {
  // Disable drop mode
  this.setState({ isDropMode: false, showPopup: false })
  this.removeMapClickHandler()
  
  // Reset cursor
  if (jimuMapView?.view?.container) {
    jimuMapView.view.container.style.cursor = 'default'
  }
}
```

}

addMapClickHandler = () => {
const { jimuMapView } = this.state

```
if (jimuMapView?.view) {
  this.mapClickHandler = jimuMapView.view.on('click', this.onMapClick)
}
```

}

removeMapClickHandler = () => {
if (this.mapClickHandler) {
this.mapClickHandler.remove()
this.mapClickHandler = null
}
}

onMapClick = (event: any) => {
const { isDropMode, graphicsLayer } = this.state

```
if (!isDropMode || !graphicsLayer) return

const { mapPoint } = event

// Check if clicking on existing pin
this.state.jimuMapView.view.hitTest(event).then((response) => {
  const existingPin = response.results.find(result => 
    result.graphic && result.graphic.layer === graphicsLayer
  )
  
  if (existingPin) {
    // Edit existing pin
    this.editPin(existingPin.graphic)
  } else {
    // Create new pin
    this.createNewPin(mapPoint, event)
  }
})
```

}

createNewPin = (mapPoint: Point, event: any) => {
this.pinCounter++

```
const pinData = {
  id: `pin_${this.pinCounter}_${Date.now()}`,
  name: `Pin ${this.pinCounter}`,
  lat: parseFloat(mapPoint.latitude.toFixed(6)),
  lng: parseFloat(mapPoint.longitude.toFixed(6)),
  color: '#FF0000'
}

const graphic = this.createPinGraphic(pinData, mapPoint)
this.state.graphicsLayer.add(graphic)

// Show popup
this.showPinPopup(pinData, event, graphic)
```

}

editPin = (graphic: Graphic) => {
const pinData = {
id: graphic.attributes.id,
name: graphic.attributes.name,
lat: parseFloat(graphic.geometry.latitude.toFixed(6)),
lng: parseFloat(graphic.geometry.longitude.toFixed(6)),
color: graphic.attributes.color
}

```
// Get screen coordinates for popup
const screenPoint = this.state.jimuMapView.view.toScreen(graphic.geometry)
const event = { x: screenPoint.x, y: screenPoint.y }

this.showPinPopup(pinData, event, graphic)
```

}

createPinGraphic = (pinData: any, point: Point) => {
const symbol = new SimpleMarkerSymbol({
color: pinData.color,
size: ‚Äò16px‚Äô,
outline: {
color: [255, 255, 255, 0.8],
width: 2
},
style: ‚Äòcircle‚Äô
})

```
return new Graphic({
  geometry: point,
  symbol: symbol,
  attributes: {
    id: pinData.id,
    name: pinData.name,
    color: pinData.color,
    lat: pinData.lat,
    lng: pinData.lng
  }
})
```

}

showPinPopup = (pinData: any, event: any, graphic: Graphic) => {
this.setState({
selectedPin: graphic,
pinData: { ‚Ä¶pinData },
showPopup: true,
popupPosition: { x: event.x, y: event.y },
isDropMode: false
})

```
// Reset cursor
if (this.state.jimuMapView?.view?.container) {
  this.state.jimuMapView.view.container.style.cursor = 'default'
}
```

}

updatePinName = (event: React.ChangeEvent<HTMLInputElement>) => {
this.setState({
pinData: {
‚Ä¶this.state.pinData,
name: event.target.value
}
})
}

updatePinColor = (event: React.ChangeEvent<HTMLSelectElement>) => {
this.setState({
pinData: {
‚Ä¶this.state.pinData,
color: event.target.value
}
})
}

savePinChanges = () => {
const { selectedPin, pinData, graphicsLayer } = this.state

```
if (!selectedPin || !graphicsLayer) return

// Update graphic attributes
selectedPin.attributes = {
  ...selectedPin.attributes,
  name: pinData.name,
  color: pinData.color
}

// Update symbol color
const newSymbol = selectedPin.symbol.clone()
newSymbol.color = pinData.color
selectedPin.symbol = newSymbol

// Refresh the layer
graphicsLayer.remove(selectedPin)
graphicsLayer.add(selectedPin)

this.closePopup()
```

}

removePin = () => {
const { selectedPin, graphicsLayer } = this.state

```
if (selectedPin && graphicsLayer) {
  graphicsLayer.remove(selectedPin)
  this.closePopup()
}
```

}

closePopup = () => {
this.setState({
showPopup: false,
selectedPin: null,
pinData: {
id: ‚Äò‚Äô,
name: ‚Äò‚Äô,
lat: 0,
lng: 0,
color: ‚Äò#FF0000‚Äô
}
})
}

copyCoordinates = () => {
const { pinData } = this.state
const coordinates = `${pinData.lat}, ${pinData.lng}`

```
if (navigator.clipboard) {
  navigator.clipboard.writeText(coordinates)
} else {
  // Fallback for older browsers
  const textArea = document.createElement('textarea')
  textArea.value = coordinates
  document.body.appendChild(textArea)
  textArea.select()
  document.execCommand('copy')
  document.body.removeChild(textArea)
}
```

}

getStyle = (): SerializedStyles => {
return css`
.drop-pin-widget {
padding: 8px;
background: white;
border-radius: 4px;
box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

```
  .pin-button {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    transition: all 0.2s ease;
  }

  .pin-button:hover {
    transform: scale(1.05);
  }

  .pin-button.active {
    background-color: #0078d4;
    color: white;
  }

  .popup-content {
    background: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    padding: 16px;
    min-width: 280px;
    max-width: 350px;
    z-index: 1000;
  }

  .popup-header {
    margin-bottom: 12px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e0e0e0;
  }

  .popup-title {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    margin-bottom: 4px;
  }

  .coordinates {
    font-size: 12px;
    color: #666;
    font-family: monospace;
    background: #f5f5f5;
    padding: 4px 8px;
    border-radius: 4px;
    cursor: pointer;
    border: 1px solid #ddd;
    transition: background-color 0.2s ease;
  }

  .coordinates:hover {
    background: #e8e8e8;
  }

  .form-group {
    margin-bottom: 12px;
  }

  .form-label {
    display: block;
    font-size: 12px;
    font-weight: 500;
    color: #333;
    margin-bottom: 4px;
  }

  .button-group {
    display: flex;
    gap: 8px;
    margin-top: 16px;
    padding-top: 12px;
    border-top: 1px solid #e0e0e0;
  }

  .btn-save {
    background: #0078d4;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    flex: 1;
  }

  .btn-save:hover {
    background: #106ebe;
  }

  .btn-remove {
    background: #d13438;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    flex: 1;
  }

  .btn-remove:hover {
    background: #a4262c;
  }

  .color-preview {
    display: inline-block;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    margin-left: 8px;
    border: 2px solid #fff;
    box-shadow: 0 0 0 1px #ddd;
    vertical-align: middle;
  }
`
```

}

render() {
const { useMapWidget } = this.props.config
const { isDropMode, showPopup, popupPosition, pinData } = this.state

```
return (
  <div className="widget-drop-pin" css={this.getStyle()}>
    <div className="drop-pin-widget">
      <Button
        className={`pin-button ${isDropMode ? 'active' : ''}`}
        onClick={this.toggleDropMode}
        title={isDropMode ? 'Cancel pin drop mode' : 'Drop a pin on the map'}
        type={isDropMode ? 'primary' : 'default'}
      >
        üìç
      </Button>
    </div>

    {useMapWidget && (
      <JimuMapViewComponent
        useMapWidgetId={useMapWidget}
        onActiveViewChange={this.onActiveViewChange}
      />
    )}

    {showPopup && (
      <Popper
        open={showPopup}
        placement="top-start"
        reference={{
          getBoundingClientRect: () => ({
            top: popupPosition.y,
            left: popupPosition.x,
            right: popupPosition.x,
            bottom: popupPosition.y,
            width: 0,
            height: 0
          })
        }}
        offset={[0, 10]}
        modifiers={[
          {
            name: 'preventOverflow',
            options: {
              boundary: 'viewport',
              padding: 8
            }
          }
        ]}
      >
        <div className="popup-content">
          <div className="popup-header">
            <div className="popup-title">{pinData.name}</div>
            <div 
              className="coordinates"
              onClick={this.copyCoordinates}
              title="Click to copy coordinates"
            >
              {pinData.lat}, {pinData.lng}
            </div>
          </div>

          <div className="form-group">
            <label className="form-label">Pin Name</label>
            <TextInput
              value={pinData.name}
              onChange={this.updatePinName}
              placeholder="Enter pin name"
              size="sm"
            />
          </div>

          <div className="form-group">
            <label className="form-label">
              Pin Color
              <span 
                className="color-preview" 
                style={{ backgroundColor: pinData.color }}
              ></span>
            </label>
            <Select
              value={pinData.color}
              onChange={this.updatePinColor}
              size="sm"
            >
              {this.availableColors.map(color => (
                <Option key={color.value} value={color.value}>
                  {color.label}
                </Option>
              ))}
            </Select>
          </div>

          <div className="button-group">
            <button className="btn-save" onClick={this.savePinChanges}>
              Save Changes
            </button>
            <button className="btn-remove" onClick={this.removePin}>
              Remove Pin
            </button>
          </div>
        </div>
      </Popper>
    )}
  </div>
)
```

}
}