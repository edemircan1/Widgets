/** @jsx jsx */
import { React, jsx, AllWidgetProps } from 'jimu-core';
import { JimuMapView, JimuMapViewComponent } from 'jimu-arcgis';
import { Slider } from 'jimu-ui';

interface State {
  activeLayer: any;
  activeSublayer: any;
  activeField: string;
  minValue: number;
  maxValue: number;
  currentMin: number;
  currentMax: number;
}

export default class Widget extends React.PureComponent<AllWidgetProps<any>, State> {
  private mapView: JimuMapView = null;
  private filterTimeout: any = null;

  constructor(props) {
    super(props);
    this.state = {
      activeLayer: null,
      activeSublayer: null,
      activeField: '',
      minValue: -120,
      maxValue: -40,
      currentMin: -120,
      currentMax: -40
    };
  }

  // MapView hazÄ±r olduÄŸunda
  onActiveViewChange = (jimuMapView: JimuMapView) => {
    if (!jimuMapView) return;
    
    this.mapView = jimuMapView;

    // Layer'lar deÄŸiÅŸtiÄŸinde dinle
    jimuMapView.view.map.allLayers.on('change', () => {
      this.checkActiveLayers();
    });

    // Layer visibility deÄŸiÅŸtiÄŸinde dinle
    jimuMapView.view.map.allLayers.forEach((layer: any) => {
      layer.watch('visible', () => {
        this.checkActiveLayers();
      });

      // MapImageLayer sublayer'larÄ±nÄ± izle
      if (layer.type === 'map-image' && layer.allSublayers) {
        layer.allSublayers.forEach((sublayer: any) => {
          sublayer.watch('visible', () => {
            this.checkActiveLayers();
          });
        });
      }
    });

    // Ä°lk yÃ¼klemede kontrol et
    this.checkActiveLayers();
  };

  // Aktif layer'larÄ± kontrol et
  checkActiveLayers = () => {
    if (!this.mapView) return;

    const layers = this.mapView.view.map.allLayers;
    let foundLayer = false;
    let lastVisibleLayer = null;

    // En son aktif edilen layer'Ä± bul
    layers.forEach((layer: any) => {
      if (layer.visible) {
        // MapImageLayer iÃ§in sublayer kontrolÃ¼
        if (layer.type === 'map-image' && layer.allSublayers) {
          layer.allSublayers.forEach((sublayer: any) => {
            if (sublayer.visible) {
              const result = this.checkSublayerFields(sublayer, layer);
              if (result) {
                lastVisibleLayer = result;
                foundLayer = true;
              }
            }
          });
        }
        // FeatureLayer iÃ§in direkt kontrol
        else if (layer.type === 'feature') {
          const result = this.checkFieldsInLayer(layer);
          if (result) {
            lastVisibleLayer = result;
            foundLayer = true;
          }
        }
      }
    });

    // En son bulunan layer'Ä± aktif et
    if (foundLayer && lastVisibleLayer) {
      this.setActiveLayer(
        lastVisibleLayer.layer,
        lastVisibleLayer.field,
        lastVisibleLayer.parent
      );
    } else if (!foundLayer) {
      // HiÃ§ layer yoksa temizle
      this.setState({
        activeLayer: null,
        activeSublayer: null,
        activeField: ''
      });
    }
  };

  // Sublayer field kontrolÃ¼
  checkSublayerFields = (sublayer: any, parentLayer: any) => {
    const title = sublayer.title?.toUpperCase() || '';

    if (title.includes('RSRP')) {
      return { layer: sublayer, field: 'RSRP', parent: parentLayer };
    } else if (title.includes('RSRQ')) {
      return { layer: sublayer, field: 'RSRQ', parent: parentLayer };
    } else if (title.includes('SNR')) {
      return { layer: sublayer, field: 'SNR', parent: parentLayer };
    }

    return null;
  };

  // Layer'daki field'larÄ± kontrol et
  checkFieldsInLayer = (layer: any) => {
    if (!layer.fields) return null;

    for (const field of layer.fields) {
      const fieldName = field.name.toUpperCase();

      if (fieldName.includes('RSRP')) {
        return { layer: layer, field: field.name, parent: null };
      } else if (fieldName.includes('RSRQ')) {
        return { layer: layer, field: field.name, parent: null };
      } else if (fieldName.includes('SNR')) {
        return { layer: layer, field: field.name, parent: null };
      }
    }

    return null;
  };

  // Aktif layer'Ä± ayarla
  setActiveLayer = (layer: any, fieldName: string, parentLayer?: any) => {
    // EÄŸer aynÄ± layer zaten aktifse tekrar set etme
    if (this.state.activeField === fieldName && this.state.activeSublayer === layer) {
      return;
    }

    let min = -120, max = -40;
    const fieldUpper = fieldName.toUpperCase();

    if (fieldUpper.includes('RSRQ')) {
      min = -20;
      max = -3;
    } else if (fieldUpper.includes('SNR')) {
      min = -10;
      max = 30;
    }

    console.log('Setting active layer:', fieldName, 'Range:', min, '-', max);

    // Ã–nceki filtreyi temizle
    const oldTarget = this.state.activeSublayer || this.state.activeLayer;
    if (oldTarget && oldTarget.definitionExpression !== undefined) {
      oldTarget.definitionExpression = null;
    }

    this.setState({
      activeLayer: parentLayer || layer,
      activeSublayer: parentLayer ? layer : null,
      activeField: fieldName,
      minValue: min,
      maxValue: max,
      currentMin: min,
      currentMax: max
    });
  };

  // Slider deÄŸiÅŸtiÄŸinde (debounce ile)
  onSliderChange = (evt: any) => {
    const value = evt.target.value;
    
    // value bir array olmalÄ± [min, max]
    if (!Array.isArray(value) || value.length !== 2) {
      console.log('Invalid slider value:', value);
      return;
    }

    this.setState({
      currentMin: value[0],
      currentMax: value[1]
    });

    // Debounce - kullanÄ±cÄ± slider'Ä± sÃ¼rÃ¼klerken sÃ¼rekli filter uygulanmasÄ±n
    if (this.filterTimeout) {
      clearTimeout(this.filterTimeout);
    }

    this.filterTimeout = setTimeout(() => {
      this.applyFilter();
    }, 300);
  };

  // Filtreyi uygula
  applyFilter = () => {
    const { activeLayer, activeSublayer, activeField, currentMin, currentMax } = this.state;

    const targetLayer = activeSublayer || activeLayer;

    if (!targetLayer || !activeField) {
      console.log('No target layer or field');
      return;
    }

    const query = `${activeField} >= ${currentMin} AND ${activeField} <= ${currentMax}`;
    
    console.log('Applying filter:', query);

    // DefinitionExpression uygula
    if (targetLayer.definitionExpression !== undefined) {
      targetLayer.definitionExpression = query;
    } else {
      console.warn('Layer does not support definitionExpression');
    }

    // Layer'Ä± refresh et
    if (activeLayer && activeLayer.refresh) {
      activeLayer.refresh();
    }
  };

  // Slider'Ä± resetle
  resetFilter = () => {
    const { minValue, maxValue, activeLayer, activeSublayer } = this.state;

    this.setState({
      currentMin: minValue,
      currentMax: maxValue
    });

    // Filtreyi kaldÄ±r
    const targetLayer = activeSublayer || activeLayer;
    if (targetLayer && targetLayer.definitionExpression !== undefined) {
      targetLayer.definitionExpression = null;
    }

    if (activeLayer && activeLayer.refresh) {
      activeLayer.refresh();
    }
  };

  render() {
    const { activeField, minValue, maxValue, currentMin, currentMax } = this.state;

    return (
      <div className="widget-rsrp-filter" style={{ padding: '20px', width: '100%', height: '100%' }}>
        <JimuMapViewComponent
          useMapWidgetId={this.props.useMapWidgetIds?.[0]}
          onActiveViewChange={this.onActiveViewChange}
        />

        {activeField ? (
          <div style={{ marginTop: '20px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '10px' }}>
              <h4 style={{ fontSize: '16px', margin: 0 }}>
                {activeField} Filtresi
              </h4>
              <button 
                onClick={this.resetFilter}
                style={{
                  padding: '5px 10px',
                  fontSize: '12px',
                  cursor: 'pointer',
                  border: '1px solid #ccc',
                  borderRadius: '4px',
                  background: '#fff'
                }}
              >
                Reset
              </button>
            </div>

            <div style={{ marginBottom: '15px' }}>
              <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '14px', marginBottom: '5px' }}>
                <span>Min: <strong>{currentMin}</strong></span>
                <span>Max: <strong>{currentMax}</strong></span>
              </div>
              <div style={{ fontSize: '12px', color: '#666' }}>
                Toplam AralÄ±k: {minValue} - {maxValue}
              </div>
            </div>

            <div style={{ padding: '10px 0' }}>
              <Slider
                min={minValue}
                max={maxValue}
                range
                value={[currentMin, currentMax]}
                onChange={this.onSliderChange}
              />
            </div>

            <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
              ðŸ’¡ Ä°ki ucu sÃ¼rÃ¼kleyerek min/max deÄŸerleri ayarlayÄ±n
            </div>
          </div>
        ) : (
          <div style={{ marginTop: '20px', textAlign: 'center', color: '#666' }}>
            <p>ðŸ“¡ RSRP, RSRQ veya SNR iÃ§eren bir layer aktif edin</p>
          </div>
        )}
      </div>
    );
  }
}