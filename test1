import arcpy
import os
import sys

class Toolbox(object):
def **init**(self):
“”“Define the toolbox (the name of the toolbox is the name of the .pyt file).”””
self.label = “Cell Coverage Tools”
self.alias = “CellCoverageTools”
self.tools = [CellCoverageSelector]

class CellCoverageSelector(object):
def **init**(self):
“”“Define the tool (tool name is the name of the class).”””
self.label = “Cell Coverage Selector”
self.description = “Select cells by drawing and toggle coverage display”
self.canRunInBackground = False

```
def getParameterInfo(self):
    """Define parameter definitions"""
    
    # Parameter 0: Cell Layer (Input)
    param0 = arcpy.Parameter(
        displayName="Cell Polygon Layer (Sectors_Testing_4G)",
        name="cell_layer",
        datatype="GPFeatureLayer",
        parameterType="Required",
        direction="Input"
    )
    param0.filter.list = ["Polygon"]
    
    # Parameter 1: Coverage Layer (Input) 
    param1 = arcpy.Parameter(
        displayName="700MHz Coverage Layer", 
        name="coverage_layer",
        datatype="GPFeatureLayer",
        parameterType="Required", 
        direction="Input"
    )
    
    # Parameter 2: Drawing Geometry (Input)
    param2 = arcpy.Parameter(
        displayName="Selection Area (Draw on Map)",
        name="selection_geometry",
        datatype="GPFeatureSet",
        parameterType="Required",
        direction="Input"
    )
    
    # Parameter 3: Operation Type
    param3 = arcpy.Parameter(
        displayName="Operation",
        name="operation_type", 
        datatype="GPString",
        parameterType="Required",
        direction="Input"
    )
    param3.filter.type = "ValueList"
    param3.filter.list = ["New Selection", "Toggle Cells", "Clear Selection"]
    param3.value = "New Selection"
    
    # Parameter 4: Cell Selection (Multiselect for toggle)
    param4 = arcpy.Parameter(
        displayName="Select Cells to Display",
        name="selected_cells",
        datatype="GPString", 
        parameterType="Optional",
        direction="Input",
        multiValue=True
    )
    param4.enabled = False
    
    # Parameter 5: Output message
    param5 = arcpy.Parameter(
        displayName="Result",
        name="result_message",
        datatype="GPString",
        parameterType="Derived",
        direction="Output"
    )
    
    return [param0, param1, param2, param3, param4, param5]

def isLicensed(self):
    """Set whether tool is licensed to execute."""
    return True

def updateParameters(self, parameters):
    """Modify the values and properties of parameters before internal validation."""
    
    try:
        # Enable/disable cell selection parameter based on operation
        if parameters[3].valueAsText == "Toggle Cells":
            parameters[4].enabled = True
            
            # Populate available cells from previous selection
            if parameters[0].value and parameters[1].value:
                try:
                    # Get currently selected cells from coverage layer
                    coverage_layer = parameters[1].value
                    selected_cells = []
                    
                    # Check if there are features in coverage layer
                    result = arcpy.GetCount_management(coverage_layer)
                    count = int(result.getOutput(0))
                    
                    if count > 0:
                        with arcpy.da.SearchCursor(coverage_layer, ["softsectorname"]) as cursor:
                            for row in cursor:
                                if row[0] is not None and str(row[0]) not in selected_cells:
                                    selected_cells.append(str(row[0]))
                    
                    if selected_cells:
                        parameters[4].filter.list = sorted(selected_cells)
                    
                except Exception as e:
                    arcpy.AddWarning("Could not populate cell list: " + str(e))
        else:
            parameters[4].enabled = False
    except:
        pass

def updateMessages(self, parameters):
    """Modify the messages created by internal validation."""
    
    try:
        # Validate that required fields exist
        if parameters[0].value:
            try:
                desc = arcpy.Describe(parameters[0].value)
                field_names = [field.name.upper() for field in desc.fields]
                if "CELL" not in field_names:
                    parameters[0].setErrorMessage("Cell layer must contain 'CELL' field")
            except Exception as e:
                parameters[0].setWarningMessage("Could not validate fields: " + str(e))
                
        if parameters[1].value:
            try:
                desc = arcpy.Describe(parameters[1].value) 
                field_names = [field.name.upper() for field in desc.fields]
                if "SOFTSECTORNAME" not in field_names:
                    parameters[1].setErrorMessage("Coverage layer must contain 'softsectorname' field")
            except Exception as e:
                parameters[1].setWarningMessage("Could not validate fields: " + str(e))
    except:
        pass

def execute(self, parameters, messages):
    """The source code of the tool."""
    
    try:
        arcpy.AddMessage("Starting Cell Coverage Selector tool...")
        
        # Get parameters
        cell_layer = parameters[0].valueAsText
        coverage_layer = parameters[1].valueAsText 
        selection_geometry = parameters[2].value
        operation_type = parameters[3].valueAsText
        selected_cells = []
        if parameters[4].values:
            selected_cells = [str(cell) for cell in parameters[4].values]
        
        arcpy.AddMessage("Operation: " + str(operation_type))
        
        # Make feature layers for selection operations
        cell_lyr = "cell_temp_layer"
        coverage_lyr = "coverage_temp_layer"
        
        # Clean up existing layers
        for lyr in [cell_lyr, coverage_lyr]:
            if arcpy.Exists(lyr):
                arcpy.management.Delete(lyr)
            
        # Create temporary layers
        arcpy.AddMessage("Creating temporary layers...")
        arcpy.management.MakeFeatureLayer(cell_layer, cell_lyr)
        arcpy.management.MakeFeatureLayer(coverage_layer, coverage_lyr)
        
        result_msg = "Operation failed"
        
        if operation_type == "Clear Selection":
            arcpy.AddMessage("Clearing all selections...")
            # Clear all selections
            arcpy.management.SelectLayerByAttribute(cell_lyr, "CLEAR_SELECTION")
            arcpy.management.SelectLayerByAttribute(coverage_lyr, "CLEAR_SELECTION")
            result_msg = "All selections cleared"
            
        elif operation_type == "New Selection":
            arcpy.AddMessage("Processing new selection...")
            
            # Clear existing selections first
            arcpy.management.SelectLayerByAttribute(cell_lyr, "CLEAR_SELECTION") 
            arcpy.management.SelectLayerByAttribute(coverage_lyr, "CLEAR_SELECTION")
            
            # Convert FeatureSet to feature class for selection
            temp_fc = arcpy.env.scratchGDB + "/temp_selection"
            if arcpy.Exists(temp_fc):
                arcpy.management.Delete(temp_fc)
                
            # Create temporary feature class from selection geometry
            arcpy.management.CopyFeatures(selection_geometry, temp_fc)
            
            # Select cells that intersect with drawn geometry
            arcpy.AddMessage("Selecting cells within drawn area...")
            arcpy.management.SelectLayerByLocation(
                cell_lyr, 
                "INTERSECT", 
                temp_fc,
                selection_type="NEW_SELECTION"
            )
            
            # Get selected cell IDs
            selected_cell_ids = []
            with arcpy.da.SearchCursor(cell_lyr, ["CELL"]) as cursor:
                for row in cursor:
                    if row[0] is not None:
                        selected_cell_ids.append(str(row[0]))
            
            arcpy.AddMessage("Found " + str(len(selected_cell_ids)) + " cells in selection area")
            
            if selected_cell_ids:
                # Filter coverage layer based on selected cells
                where_clause = "softsectorname IN (" + ",".join(["'" + str(cell_id) + "'" for cell_id in selected_cell_ids]) + ")"
                arcpy.AddMessage("Applying filter: " + where_clause)
                
                arcpy.management.SelectLayerByAttribute(
                    coverage_lyr,
                    "NEW_SELECTION", 
                    where_clause
                )
                
                result_msg = "Selected " + str(len(selected_cell_ids)) + " cells and corresponding coverage areas"
            else:
                result_msg = "No cells found in the drawn area"
            
            # Clean up temp fc
            if arcpy.Exists(temp_fc):
                arcpy.management.Delete(temp_fc)
                
        elif operation_type == "Toggle Cells":
            arcpy.AddMessage("Processing cell toggle...")
            
            # Toggle specific cells on/off
            if selected_cells:
                where_clause = "softsectorname IN (" + ",".join(["'" + str(cell_id) + "'" for cell_id in selected_cells]) + ")"
                arcpy.AddMessage("Toggling cells: " + where_clause)
                
                arcpy.management.SelectLayerByAttribute(
                    coverage_lyr,
                    "NEW_SELECTION",
                    where_clause
                )
                
                # Also select corresponding cells in cell layer
                cell_where_clause = "CELL IN (" + ",".join(["'" + str(cell_id) + "'" for cell_id in selected_cells]) + ")"
                arcpy.management.SelectLayerByAttribute(
                    cell_lyr,
                    "NEW_SELECTION", 
                    cell_where_clause
                )
                
                result_msg = "Toggled " + str(len(selected_cells)) + " selected cells"
            else:
                result_msg = "No cells selected for toggle operation"
        
        # Apply the selection to the original layers in the map
        arcpy.AddMessage("Applying selection to map layers...")
        
        try:
            # Get the map layers
            aprx = arcpy.mp.ArcGISProject("CURRENT")
            if aprx.activeMap:
                map_obj = aprx.activeMap
                
                # Get selection count for layers
                cell_selection = arcpy.management.GetCount(cell_lyr)
                coverage_selection = arcpy.management.GetCount(coverage_lyr)
                
                arcpy.AddMessage("Cell layer selection count: " + str(cell_selection))
                arcpy.AddMessage("Coverage layer selection count: " + str(coverage_selection))
                
                # Find and update the actual layers in the map
                updated_layers = 0
                for layer in map_obj.listLayers():
                    if hasattr(layer, 'name'):
                        if "Sectors_Testing_4G" in layer.name or "sectors" in layer.name.lower():
                            arcpy.AddMessage("Found cell layer: " + layer.name)
                            updated_layers += 1
                            
                        elif "700MHz" in layer.name or "700" in layer.name:
                            arcpy.AddMessage("Found coverage layer: " + layer.name)
                            updated_layers += 1
                
                if updated_layers == 0:
                    arcpy.AddWarning("Could not find target layers in map. Please ensure layers are named correctly.")
                
        except Exception as e:
            arcpy.AddWarning("Could not update map layers: " + str(e))
        
        # Set output parameter
        parameters[5].value = result_msg
        arcpy.AddMessage("Operation completed: " + result_msg)
        
    except Exception as e:
        error_msg = "Error in tool execution: " + str(e)
        arcpy.AddError(error_msg)
        # Get more detailed error info
        import traceback
        arcpy.AddError("Detailed error: " + traceback.format_exc())
    
    finally:
        # Clean up temporary layers
        try:
            for lyr in [cell_lyr, coverage_lyr]:
                if arcpy.Exists(lyr):
                    arcpy.management.Delete(lyr)
            arcpy.AddMessage("Cleaned up temporary layers")
        except Exception as e:
            arcpy.AddWarning("Could not clean up temporary layers: " + str(e))
```