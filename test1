import { React, AllWidgetProps } from 'jimu-core';
import { BaseWidget } from 'jimu-core';
import FeatureLayer from 'esri/layers/FeatureLayer';
import { JimuMapViewComponent, JimuMapView } from 'jimu-arcgis';

export default class AutoPolygonSizer extends BaseWidget<AllWidgetProps<any>, any> {
  
  private featureLayer: FeatureLayer = null;
  private jimuMapView: JimuMapView = null;
  
  // URL'i buradan kontrol et - KENDƒ∞ URL'ƒ∞Nƒ∞ YAZMANIZ GEREK
  private readonly FEATURE_LAYER_URL = "https://services.arcgis.com/your-service-url/FeatureServer/0";
  
  // Size ayarlarƒ±
  private readonly SIZE_CONFIG = {
    baseSize: 2,
    zoomFactor: 0.5,
    minSize: 0.5,
    maxSize: 8
  };

  // MapView hazƒ±r olduƒüunda tetiklenen callback
  activeViewChangeHandler = (jimuMapView: JimuMapView) => {
    console.log('üó∫Ô∏è MapView ready:', jimuMapView);
    
    if (jimuMapView) {
      this.jimuMapView = jimuMapView;
      
      // MapView tamamen y√ºklendiƒüinde layer'ƒ± ekle
      jimuMapView.whenJimuMapViewLoaded().then(() => {
        console.log('‚úÖ MapView fully loaded');
        this.loadFeatureLayer();
      });
    }
  }

  loadFeatureLayer = async () => {
    try {
      console.log('üîÑ Loading feature layer from:', this.FEATURE_LAYER_URL);
      
      // Feature Layer olu≈ütur
      this.featureLayer = new FeatureLayer({
        url: this.FEATURE_LAYER_URL,
        title: "Auto-sized Polygons",
        renderer: this.createInitialRenderer()
      });

      console.log('‚úÖ Feature layer created:', this.featureLayer);
      
      if (this.jimuMapView?.view) {
        console.log('‚úÖ Adding layer to map...');
        
        // Layer'ƒ± map'e ekle
        this.jimuMapView.view.map.add(this.featureLayer);
        console.log('‚úÖ Layer added to map');
        
        // Zoom listener'ƒ± kur
        this.setupZoomListener(this.jimuMapView.view);
        
        // ƒ∞lk boyut ayarƒ±nƒ± yap
        const currentZoom = this.jimuMapView.view.zoom;
        console.log('üîç Initial zoom level:', currentZoom);
        this.adjustPolygonSize(currentZoom);
        
      } else {
        console.log('‚ùå MapView not ready');
      }
      
    } catch (error) {
      console.error('‚ùå Feature Layer loading error:', error);
    }
  }

  createInitialRenderer = () => {
    const renderer = {
      type: "simple",
      symbol: {
        type: "simple-fill",
        color: [51, 150, 204, 0.4],
        outline: {
          color: [51, 150, 204, 1],
          width: this.SIZE_CONFIG.baseSize,
          style: "solid"
        }
      }
    };
    
    console.log('üé® Created initial renderer:', renderer);
    return renderer;
  }

  setupZoomListener = (mapView: any) => {
    console.log('üëÇ Setting up zoom listener...');
    console.log('üîç Current zoom level:', mapView.zoom);
    
    mapView.watch("zoom", (newZoom: number, oldZoom: number) => {
      console.log(`üîç ZOOM CHANGED: ${oldZoom} ‚Üí ${newZoom}`);
      this.adjustPolygonSize(newZoom);
    });
    
    console.log('‚úÖ Zoom listener setup complete');
  }

  adjustPolygonSize = (zoomLevel: number) => {
    console.log('üîß === ADJUSTING POLYGON SIZE ===');
    console.log('üîç Zoom level:', zoomLevel);
    
    if (!this.featureLayer) {
      console.log('‚ùå No feature layer found!');
      return;
    }

    // Size hesapla
    const { baseSize, zoomFactor, minSize, maxSize } = this.SIZE_CONFIG;
    let calculatedSize = baseSize * Math.max(0.5, (18 - zoomLevel) * zoomFactor);
    calculatedSize = Math.max(minSize, Math.min(maxSize, calculatedSize));
    
    console.log('üìè Calculated size:', calculatedSize);
    
    const currentRenderer = this.featureLayer.renderer;
    
    if (currentRenderer) {
      const newRenderer = currentRenderer.clone();
      
      if (newRenderer.symbol && newRenderer.symbol.outline) {
        const oldWidth = newRenderer.symbol.outline.width;
        newRenderer.symbol.outline.width = calculatedSize;
        
        console.log(`üìè Outline width: ${oldWidth} ‚Üí ${calculatedSize}`);
        
        this.featureLayer.renderer = newRenderer;
        console.log('‚úÖ Renderer updated successfully');
      }
    }
  }

  render() {
    // MapView bile≈üeni ekliyoruz
    if (!this.props.useMapWidgetIds || this.props.useMapWidgetIds.length === 0) {
      console.log('‚ùå No map widget selected');
      return <div>Please select a map in widget settings</div>;
    }

    return (
      <div style={{ width: '100%', height: '100%', position: 'absolute', visibility: 'hidden' }}>
        <JimuMapViewComponent 
          useMapWidgetId={this.props.useMapWidgetIds[0]}
          onActiveViewChange={this.activeViewChangeHandler}
        />
      </div>
    );
  }
}