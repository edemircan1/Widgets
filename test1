  towerData?: Array<{usid: string, heightFt: number, distance: number, terrainElevation: number, totalElevation: number, towers: any[]}>

===

// YENÄ° METOD - Tower dikey Ã§izgileri iÃ§in Column Series ekle
  addTowerColumnSeries = (ctx) => {
    if (!this.props.towerData || this.props.towerData.length === 0) {
      return null
    }

    console.log('ðŸ—¼ Creating tower column series with', this.props.towerData.length, 'towers')

    // Tower data'yÄ± chart formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼r
    const towerChartData = this.props.towerData.map(tower => ({
      x: convertSingle(tower.distance, this.props.profileResult.effectiveUnits.distance, this.props.selectedLinearUnit),
      terrainY: convertSingle(tower.terrainElevation, this.props.profileResult.effectiveUnits.elevation, this.props.selectedElevationUnit),
      towerTopY: convertSingle(tower.totalElevation, this.props.profileResult.effectiveUnits.elevation, this.props.selectedElevationUnit),
      towerHeight: convertSingle(tower.towerHeight, 'meters', this.props.selectedElevationUnit),
      usids: tower.towers.map(t => t.usid).join(', '),
      heightInfo: `${tower.towerHeightFt.toFixed(1)}ft (${tower.towerHeight.toFixed(1)}m)`
    }))

    // Column Series oluÅŸtur (dikey Ã§izgiler iÃ§in)
    const towerColumnSeries = ColumnSeries.new(ctx.chart.root, {
      name: 'ðŸ—¼ Cell Towers',
      valueXField: 'x',
      openValueYField: 'terrainY',     // Terrain elevation (alt)
      valueYField: 'towerTopY',        // Tower top elevation (Ã¼st)
      xAxis: ctx.xAxis,
      yAxis: ctx.yAxis,
      legendLabelText: '{name}',
      fill: colorAm5('#0066cc'),       // Mavi renk
      stroke: colorAm5('#0044aa'),     // Koyu mavi border
      cornerRadiusBL: 0,
      cornerRadiusBR: 0,
      cornerRadiusTL: 2,
      cornerRadiusTR: 2
    })

    // Column geniÅŸliÄŸi ayarla
    towerColumnSeries.columns.template.setAll({
      width: 8,  // Column geniÅŸliÄŸi
      fillOpacity: 0.8,
      strokeWidth: 1,
      strokeOpacity: 1
    })

    // Hover efekti
    towerColumnSeries.columns.template.states.create('hover', {
      fillOpacity: 1,
      scale: 1.1
    })

    // Tower tooltip'i
    towerColumnSeries.set('tooltip', TooltipAm5.new(ctx.chart.root, {
      labelText: `ðŸ—¼ Tower
Distance: {x} ${this.nls(this.props.unitOptions.find(u => u.value === this.props.selectedLinearUnit)?.abbreviation)}
USID: {usids}
Height: {heightInfo}
Terrain: {terrainY} ${this.nls(this.props.unitOptions.find(u => u.value === this.props.selectedElevationUnit)?.abbreviation)}
Total: {towerTopY} ${this.nls(this.props.unitOptions.find(u => u.value === this.props.selectedElevationUnit)?.abbreviation)}`
    }))

    // Tower data'yÄ± set et
    towerColumnSeries.data.setAll(towerChartData)

    console.log('ðŸ—¼ Tower column series created with data:', towerChartData)

    return towerColumnSeries
  }


===

initChart = async (params) => {
    // ... mevcut kod

    //Create Volumetric objects series
    if (this._viewOutput && this.props.showVolumetricObj && this.props.mapView.view.type === '3d') {
      const volumetricObjSeries = this.addVolumetricObjLineSeries(ctx)
      volumetricObjSeries.data.setAll(params.definition.data)
      chart.series.push(volumetricObjSeries)
    }

    // YENÄ° EKLENEN: Tower Column Series
    const towerSeries = this.addTowerColumnSeries(ctx)
    if (towerSeries) {
      chart.series.push(towerSeries)
    }

    this.profilingWithCustomizeOptions(ctx)
    // ... devam eden kod
  }
