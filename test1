// YENİ METOD - Polygon height'ları profile'a ekle (USID bazlı) - DEBUG VERSION
  addPolygonHeights = async (profileData: any): Promise<any> => {
    if (!profileData || !profileData.lines || profileData.lines.length === 0) {
      return profileData
    }

    try {
      // Profile line geometry'sini al
      const profileGeometry = this._defaultViewModel?.input?.geometry
      if (!profileGeometry) {
        return profileData
      }

      // FeatureLayer instance oluştur
      const featureLayer = new FeatureLayer({
        url: this.state.polygonHeightLayerUrl
      })

      // Layer yüklenene kadar bekle
      await featureLayer.load()

      // Query parametreleri
      const query = featureLayer.createQuery()
      query.geometry = profileGeometry
      query.spatialRelationship = 'intersects'
      query.returnGeometry = true
      query.outFields = ['USID', 'height_ft'] // USID ve height_ft field'larını al
      query.returnZ = true

      const queryResult = await featureLayer.queryFeatures(query)
      
      if (queryResult.features.length === 0) {
        console.log('No intersecting polygons found')
        return profileData
      }

      console.log(`Found ${queryResult.features.length} intersecting polygons`)

      // USID bazlı height mapping oluştur
      const usidHeightMap = new Map()
      console.log('=== POLYGON ATTRIBUTES DEBUG ===')
      queryResult.features.forEach((feature, index) => {
        console.log(`Polygon ${index}:`, feature.attributes)
        const usid = feature.attributes.USID
        const heightFt = feature.attributes.height_ft
        if (usid && heightFt && !isNaN(heightFt)) {
          usidHeightMap.set(usid, heightFt)
          console.log(`✓ MAPPED - USID: ${usid}, Height: ${heightFt} ft`)
        } else {
          console.log(`✗ SKIPPED - USID: ${usid}, Height: ${heightFt}`)
        }
      })

      console.log(`Total mapped USIDs: ${usidHeightMap.size}`)

      // Profile data'yı modify et
      const modifiedProfileData = JSON.parse(JSON.stringify(profileData))
      
      // İlk line'ı (ground elevation) al
      if (modifiedProfileData.lines && modifiedProfileData.lines[0] && modifiedProfileData.lines[0].samples) {
        const samples = modifiedProfileData.lines[0].samples
        console.log(`=== PROCESSING ${samples.length} SAMPLE POINTS ===`)
        
        let totalHeightAdded = 0
        samples.forEach((sample, index) => {
          // Her sample point için polygon intersection kontrol et
          const samplePoint = new Point({
            x: sample.x,
            y: sample.y,
            spatialReference: profileGeometry.spatialReference
          })

          // Intersecting polygon'ları kontrol et
          queryResult.features.forEach((feature) => {
            if (geometryEngine.intersects(samplePoint, feature.geometry)) {
              const usid = feature.attributes.USID
              const heightFt = usidHeightMap.get(usid)
              
              if (heightFt && !isNaN(heightFt)) {
                // Feet to meters conversion
                const heightInMeters = heightFt * 0.3048
                sample.elevation = sample.elevation + heightInMeters
                totalHeightAdded++
                console.log(`✓ Added ${heightFt} ft (${heightInMeters} m) for USID: ${usid} at sample ${index}, distance ${sample.distance}`)
              }
            }
          })
        })

        console.log(`=== SUMMARY: Added height to ${totalHeightAdded} sample points ===`)
      }

      return modifiedProfileData
    } catch (error) {
      console.error('Error adding polygon heights:', error)
      return profileData
    }
  }
