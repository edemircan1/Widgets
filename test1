/** @jsx jsx */
import { React, AllWidgetProps, jsx } from ‘jimu-core’;
import { JimuMapView } from ‘jimu-arcgis’;
import FeatureLayer from ‘esri/layers/FeatureLayer’;

interface State {
polygonData: any[];
kpiData: any[];
loading: boolean;
error: string;
}

export default class Widget extends React.PureComponent<AllWidgetProps<{}>, State> {
// Hard-coded URLs for your feature services
private readonly DFW_TX_LTE_URL = ‘YOUR_DFW_TX_LTE_FEATURE_LAYER_URL_HERE’;
private readonly KPIS_URL = ‘YOUR_KPIS_LAYER_URL_HERE’;

constructor(props) {
super(props);
this.state = {
polygonData: [],
kpiData: [],
loading: false,
error: ‘’
};
}

componentDidMount() {
this.loadData();
}

loadData = async () => {
this.setState({ loading: true, error: ‘’ });

```
try {
  // Load DFW_TX_LTE polygon data
  const polygonLayer = new FeatureLayer({
    url: this.DFW_TX_LTE_URL
  });

  const polygonQuery = polygonLayer.createQuery();
  polygonQuery.where = '1=1'; // Get all features
  polygonQuery.outFields = ['*']; // Get all fields
  polygonQuery.returnGeometry = false;

  const polygonResults = await polygonLayer.queryFeatures(polygonQuery);
  const polygonFeatures = polygonResults.features.map(f => f.attributes);

  // Load KPIS data
  const kpiLayer = new FeatureLayer({
    url: this.KPIS_URL
  });

  const kpiQuery = kpiLayer.createQuery();
  kpiQuery.where = '1=1';
  kpiQuery.outFields = ['*'];
  kpiQuery.returnGeometry = false;

  const kpiResults = await kpiLayer.queryFeatures(kpiQuery);
  const kpiFeatures = kpiResults.features.map(f => f.attributes);

  this.setState({
    polygonData: polygonFeatures,
    kpiData: kpiFeatures,
    loading: false
  });

  console.log('DFW_TX_LTE Data:', polygonFeatures);
  console.log('KPIS Data:', kpiFeatures);

} catch (error) {
  this.setState({
    loading: false,
    error: `Error loading data: ${error.message}`
  });
  console.error('Error:', error);
}
```

};

render() {
const { polygonData, kpiData, loading, error } = this.state;

```
return (
  <div className="widget-custom" style={{ padding: '20px' }}>
    <h3>Feature Services Data Reader</h3>
    
    {loading && <p>Loading data...</p>}
    
    {error && <p style={{ color: 'red' }}>{error}</p>}
    
    {!loading && !error && (
      <div>
        <div style={{ marginBottom: '20px' }}>
          <h4>DFW_TX_LTE Layer</h4>
          <p>Records loaded: {polygonData.length}</p>
          {polygonData.length > 0 && (
            <details>
              <summary>View first record</summary>
              <pre style={{ fontSize: '12px', background: '#f5f5f5', padding: '10px' }}>
                {JSON.stringify(polygonData[0], null, 2)}
              </pre>
            </details>
          )}
        </div>

        <div>
          <h4>KPIS Layer</h4>
          <p>Records loaded: {kpiData.length}</p>
          {kpiData.length > 0 && (
            <details>
              <summary>View first record</summary>
              <pre style={{ fontSize: '12px', background: '#f5f5f5', padding: '10px' }}>
                {JSON.stringify(kpiData[0], null, 2)}
              </pre>
            </details>
          )}
        </div>

        <button 
          onClick={this.loadData}
          style={{ marginTop: '20px', padding: '8px 16px', cursor: 'pointer' }}
        >
          Reload Data
        </button>
      </div>
    )}
  </div>
);
```

}
}