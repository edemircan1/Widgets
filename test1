/** @jsx jsx */
import { React, jsx, AllWidgetProps } from 'jimu-core';
import { JimuMapView, JimuMapViewComponent } from 'jimu-arcgis';
import { Slider } from 'jimu-ui';
import FeatureLayer from 'esri/layers/FeatureLayer';

interface State {
  activeLayer: any;
  activeField: string;
  minValue: number;
  maxValue: number;
  currentMin: number;
  currentMax: number;
}

export default class Widget extends React.PureComponent<AllWidgetProps<any>, State> {
  constructor(props) {
    super(props);
    this.state = {
      activeLayer: null,
      activeField: '',
      minValue: -120,
      maxValue: -40,
      currentMin: -120,
      currentMax: -40
    };
  }

  // MapView hazır olduğunda
  onActiveViewChange = (jimuMapView: JimuMapView) => {
    if (!jimuMapView) return;

    // Layer'lar değiştiğinde dinle
    jimuMapView.view.map.allLayers.on('change', () => {
      this.checkActiveLayers(jimuMapView);
    });

    // İlk yüklemede de kontrol et
    this.checkActiveLayers(jimuMapView);
  };

  // Aktif layer'ları kontrol et
  checkActiveLayers = (jimuMapView: JimuMapView) => {
    const layers = jimuMapView.view.map.allLayers;
    
    layers.forEach((layer: any) => {
      if (layer.visible && layer.type === 'feature') {
        const featureLayer = layer as FeatureLayer;
        
        // Sublayer'ları kontrol et
        if (featureLayer.sublayers) {
          featureLayer.sublayers.forEach((sublayer: any) => {
            if (sublayer.visible) {
              this.checkFieldsInSublayer(sublayer);
            }
          });
        } else {
          // Normal feature layer
          this.checkFieldsInLayer(featureLayer);
        }
      }
    });
  };

  // Layer'daki field'ları kontrol et
  checkFieldsInLayer = (layer: any) => {
    if (!layer.fields) return;

    layer.fields.forEach((field: any) => {
      const fieldName = field.name.toUpperCase();
      
      if (fieldName.includes('RSRP') || fieldName.includes('RSRQ') || fieldName.includes('SNR')) {
        this.setActiveLayer(layer, field.name);
      }
    });
  };

  // Sublayer'daki field'ları kontrol et
  checkFieldsInSublayer = (sublayer: any) => {
    if (!sublayer.fields) return;

    sublayer.fields.forEach((field: any) => {
      const fieldName = field.name.toUpperCase();
      
      if (fieldName.includes('RSRP') || fieldName.includes('RSRQ') || fieldName.includes('SNR')) {
        this.setActiveLayer(sublayer, field.name);
      }
    });
  };

  // Aktif layer'ı ayarla
  setActiveLayer = (layer: any, fieldName: string) => {
    // Min/max değerleri belirle (field tipine göre)
    let min = -120, max = -40;
    
    if (fieldName.toUpperCase().includes('RSRQ')) {
      min = -20;
      max = -3;
    } else if (fieldName.toUpperCase().includes('SNR')) {
      min = -10;
      max = 30;
    }

    this.setState({
      activeLayer: layer,
      activeField: fieldName,
      minValue: min,
      maxValue: max,
      currentMin: min,
      currentMax: max
    });
  };

  // Slider değiştiğinde
  onSliderChange = (value: number[]) => {
    this.setState({
      currentMin: value[0],
      currentMax: value[1]
    }, () => {
      this.applyFilter();
    });
  };

  // Filtreyi uygula
  applyFilter = () => {
    const { activeLayer, activeField, currentMin, currentMax } = this.state;
    
    if (!activeLayer || !activeField) return;

    const query = `${activeField} >= ${currentMin} AND ${activeField} <= ${currentMax}`;
    activeLayer.definitionExpression = query;
  };

  render() {
    const { activeField, minValue, maxValue, currentMin, currentMax } = this.state;

    return (
      <div className="widget-simple" style={{ padding: '20px' }}>
        <JimuMapViewComponent
          useMapWidgetId={this.props.useMapWidgetIds?.[0]}
          onActiveViewChange={this.onActiveViewChange}
        />

        {activeField ? (
          <div style={{ marginTop: '20px' }}>
            <h4>{activeField} Filtresi</h4>
            <p>Aralık: {currentMin} - {currentMax}</p>
            
            <Slider
              range
              min={minValue}
              max={maxValue}
              value={[currentMin, currentMax]}
              onChange={this.onSliderChange}
            />
          </div>
        ) : (
          <p>RSRP, RSRQ veya SNR içeren bir layer aktif edin</p>
        )}
      </div>
    );
  }
}