// YENİ METOD - Polygon height'ları profile'a ekle (USID bazlı, duplicate face handling)
  addPolygonHeights = async (profileData: any): Promise<any> => {
    if (!profileData || !profileData.lines || profileData.lines.length === 0) {
      return profileData
    }

    try {
      // Profile line geometry'sini al
      const profileGeometry = this._defaultViewModel?.input?.geometry
      if (!profileGeometry) {
        return profileData
      }

      // FeatureLayer instance oluştur
      const featureLayer = new FeatureLayer({
        url: this.state.polygonHeightLayerUrl
      })

      // Layer yüklenene kadar bekle
      await featureLayer.load()

      // Query parametreleri
      const query = featureLayer.createQuery()
      query.geometry = profileGeometry
      query.spatialRelationship = 'intersects'
      query.returnGeometry = true
      query.outFields = ['usid', 'height_ft'] // lowercase field names
      query.returnZ = true

      const queryResult = await featureLayer.queryFeatures(query)
      
      if (queryResult.features.length === 0) {
        console.log('No intersecting polygons found')
        return profileData
      }

      console.log(`Found ${queryResult.features.length} intersecting polygons`)

      // USID bazlı height mapping oluştur (sadece unique USID'ler)
      const usidHeightMap = new Map()
      console.log('=== POLYGON ATTRIBUTES DEBUG ===')
      queryResult.features.forEach((feature, index) => {
        const usid = feature.attributes.usid
        const heightFt = feature.attributes.height_ft
        
        // Aynı USID'yi sadece bir kez map'e ekle
        if (usid && heightFt && !isNaN(heightFt) && !usidHeightMap.has(usid)) {
          usidHeightMap.set(usid, heightFt)
          console.log(`✓ MAPPED - USID: ${usid}, Height: ${heightFt} ft`)
        } else if (usidHeightMap.has(usid)) {
          console.log(`⚠ DUPLICATE USID SKIPPED - USID: ${usid} already mapped with height: ${usidHeightMap.get(usid)} ft`)
        } else {
          console.log(`✗ INVALID DATA - USID: ${usid}, Height: ${heightFt}`)
        }
      })

      console.log(`Total unique USIDs mapped: ${usidHeightMap.size}`)

      // Profile data'yı modify et
      const modifiedProfileData = JSON.parse(JSON.stringify(profileData))
      
      // İlk line'ı (ground elevation) al
      if (modifiedProfileData.lines && modifiedProfileData.lines[0] && modifiedProfileData.lines[0].samples) {
        const samples = modifiedProfileData.lines[0].samples
        console.log(`=== PROCESSING ${samples.length} SAMPLE POINTS ===`)
        
        // Her sample point için hangi USID'lere dokunduğunu track et
        const sampleUsidMap = new Map() // sample index -> Set of USIDs
        
        samples.forEach((sample, sampleIndex) => {
          const samplePoint = new Point({
            x: sample.x,
            y: sample.y,
            spatialReference: profileGeometry.spatialReference
          })

          const touchedUsids = new Set()

          // Intersecting polygon'ları kontrol et
          queryResult.features.forEach((feature) => {
            if (geometryEngine.intersects(samplePoint, feature.geometry)) {
              const usid = feature.attributes.usid
              if (usid && usidHeightMap.has(usid)) {
                touchedUsids.add(usid)
              }
            }
          })

          sampleUsidMap.set(sampleIndex, touchedUsids)
        })

        // Şimdi her sample'a height ekle (her USID sadece bir kez)
        let totalHeightAdded = 0
        let totalUsidsProcessed = 0
        
        samples.forEach((sample, sampleIndex) => {
          const touchedUsids = sampleUsidMap.get(sampleIndex)
          
          if (touchedUsids && touchedUsids.size > 0) {
            touchedUsids.forEach((usid) => {
              const heightFt = usidHeightMap.get(usid)
              if (heightFt && !isNaN(heightFt)) {
                const heightInMeters = heightFt * 0.3048
                sample.elevation = sample.elevation + heightInMeters
                totalHeightAdded += heightInMeters
                totalUsidsProcessed++
                console.log(`✓ Added ${heightFt} ft (${heightInMeters} m) for USID: ${usid} at sample ${sampleIndex}, distance ${sample.distance}`)
              }
            })
          }
        })

        console.log(`=== SUMMARY ===`)
        console.log(`Processed ${totalUsidsProcessed} unique USID applications`)
        console.log(`Total height added: ${(totalHeightAdded / 0.3048).toFixed(2)} ft (${totalHeightAdded.toFixed(2)} m)`)
      }

      return modifiedProfileData
    } catch (error) {
      console.error('Error adding polygon heights:', error)
      return profileData
    }
  }
