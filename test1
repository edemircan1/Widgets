/** @jsx jsx */
import { React, jsx, AllWidgetProps, DataSourceManager } from 'jimu-core'
import { JimuMapViewComponent, JimuMapView } from 'jimu-arcgis'
import { Button, Alert } from 'jimu-ui'
import Point from 'esri/geometry/Point'
import Graphic from 'esri/Graphic'
import PictureMarkerSymbol from 'esri/symbols/PictureMarkerSymbol'
import TextSymbol from 'esri/symbols/TextSymbol'

interface Pin {
  id: string
  x: number
  y: number
  name: string
  color: string
  graphic?: Graphic
  labelGraphic?: Graphic
}

const Widget = (props: AllWidgetProps<any>) => {
  const [jimuMapView, setJimuMapView] = React.useState<JimuMapView>()
  const [isActive, setIsActive] = React.useState(false)
  const [pins, setPins] = React.useState<Pin[]>([])
  const [selectedPin, setSelectedPin] = React.useState<Pin | null>(null)
  const [showCoords, setShowCoords] = React.useState('')
  const [clickHandler, setClickHandler] = React.useState<any>(null)

  const createPinSvg = (color: string) => {
    return `data:image/svg+xml;base64,${btoa(`
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="32" viewBox="0 0 24 32">
        <path d="M12 0C5.4 0 0 5.4 0 12c0 8 12 20 12 20s12-12 12-20c0-6.6-5.4-12-12-12z" fill="${color}" stroke="#fff" stroke-width="2"/>
        <circle cx="12" cy="12" r="4" fill="#fff"/>
      </svg>
    `)}`
  }

  const activeMapView = () => {
    if (jimuMapView?.view) {
      if (isActive) {
        // Deactivate
        jimuMapView.view.container.style.cursor = 'default'
        if (clickHandler) {
          clickHandler.remove()
          setClickHandler(null)
        }
        disableDragAndDrop()
        setIsActive(false)
      } else {
        // Activate
        jimuMapView.view.container.style.cursor = 'crosshair'
        setIsActive(true)
        
        const handler = jimuMapView.view.on('click', (event) => {
          event.stopPropagation()
          
          const point = new Point({
            longitude: event.mapPoint.longitude,
            latitude: event.mapPoint.latitude,
            spatialReference: jimuMapView.view.spatialReference
          })
          
          addPin(point.longitude, point.latitude)
        })
        
        setClickHandler(handler)
      }
    }
  }

  const [dragHandler, setDragHandler] = React.useState<any>(null)

  const enableDragAndDrop = () => {
    if (jimuMapView?.view && !dragHandler) {
      let dragGraphic: Graphic | null = null
      let dragLabelGraphic: Graphic | null = null
      let dragPinId: string | null = null

      const pointerDownHandler = jimuMapView.view.on('pointer-down', (event) => {
        jimuMapView.view.hitTest(event).then((response) => {
          if (response.results.length > 0) {
            const graphic = response.results[0].graphic
            const pin = pins.find(p => p.graphic === graphic)
            
            if (pin) {
              dragGraphic = pin.graphic
              dragLabelGraphic = pin.labelGraphic
              dragPinId = pin.id
              jimuMapView.view.container.style.cursor = 'move'
              event.stopPropagation()
            }
          }
        })
      })

      const pointerMoveHandler = jimuMapView.view.on('pointer-move', (event) => {
        if (dragGraphic && dragLabelGraphic && dragPinId) {
          event.stopPropagation()
          
          const point = jimuMapView.view.toMap({
            x: event.x,
            y: event.y
          })

          // Update pin position
          dragGraphic.geometry = point
          // Update label position
          dragLabelGraphic.geometry = point
        }
      })

      const pointerUpHandler = jimuMapView.view.on('pointer-up', (event) => {
        if (dragGraphic && dragPinId) {
          event.stopPropagation()
          
          const point = dragGraphic.geometry as Point
          
          // Update pin coordinates in state
          setPins(currentPins => currentPins.map(pin => {
            if (pin.id === dragPinId) {
              return {
                ...pin,
                x: parseFloat(point.longitude.toFixed(6)),
                y: parseFloat(point.latitude.toFixed(6))
              }
            }
            return pin
          }))
          
          jimuMapView.view.container.style.cursor = isActive ? 'crosshair' : 'default'
        }
        
        dragGraphic = null
        dragLabelGraphic = null
        dragPinId = null
      })

      setDragHandler({ pointerDownHandler, pointerMoveHandler, pointerUpHandler })
    }
  }

  const disableDragAndDrop = () => {
    if (dragHandler) {
      dragHandler.pointerDownHandler?.remove()
      dragHandler.pointerMoveHandler?.remove()
      dragHandler.pointerUpHandler?.remove()
      setDragHandler(null)
    }
  }

  React.useEffect(() => {
    if (jimuMapView?.view && pins.length > 0) {
      enableDragAndDrop()
    } else {
      disableDragAndDrop()
    }
    
    return () => {
      disableDragAndDrop()
    }
  }, [jimuMapView, pins.length, isActive])

  const getRandomColor = () => {
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ffa500', '#800080', '#ffc0cb', '#90ee90']
    return colors[Math.floor(Math.random() * colors.length)]
  }

  const createLabelGraphic = (point: Point, text: string, color: string) => {
    const labelPoint = new Point({
      longitude: point.longitude,
      latitude: point.latitude,
      spatialReference: point.spatialReference
    })

    const textSymbol = new TextSymbol({
      text: text,
      color: '#000000',
      haloColor: '#ffffff',
      haloSize: '2px',
      font: {
        size: 12,
        family: 'Arial',
        weight: 'bold'
      },
      yoffset: -20 // Position above the pin
    })

    return new Graphic({
      geometry: labelPoint,
      symbol: textSymbol
    })
  }

  const addPin = (x: number, y: number) => {
    const pinId = `pin_${Date.now()}`
    const pinColor = getRandomColor()
    
    setPins(currentPins => {
      const pinName = `Pin ${currentPins.length + 1}`
      
      const point = new Point({
        longitude: x,
        latitude: y,
        spatialReference: jimuMapView.view.spatialReference
      })

      const symbol = new PictureMarkerSymbol({
        url: createPinSvg(pinColor),
        width: '24px',
        height: '32px',
        yoffset: '16px'
      })

      const graphic = new Graphic({
        geometry: point,
        symbol: symbol,
        attributes: { id: pinId, name: pinName }
      })

      const labelGraphic = createLabelGraphic(point, pinName, pinColor)

      jimuMapView.view.graphics.add(graphic)
      jimuMapView.view.graphics.add(labelGraphic)

      const newPin: Pin = {
        id: pinId,
        x: parseFloat(x.toFixed(6)),
        y: parseFloat(y.toFixed(6)),
        name: pinName,
        color: pinColor,
        graphic: graphic,
        labelGraphic: labelGraphic
      }

      return [...currentPins, newPin]
    })
  }

  const removePin = (pinId: string) => {
    setPins(currentPins => {
      const pin = currentPins.find(p => p.id === pinId)
      if (pin) {
        if (pin.graphic) {
          jimuMapView.view.graphics.remove(pin.graphic)
        }
        if (pin.labelGraphic) {
          jimuMapView.view.graphics.remove(pin.labelGraphic)
        }
      }
      const newPins = currentPins.filter(p => p.id !== pinId)
      
      // Disable drag if no pins left
      if (newPins.length === 0) {
        disableDragAndDrop()
      }
      
      return newPins
    })
    setSelectedPin(null)
  }

  const updatePin = (pinId: string, updates: Partial<Pin>) => {
    setPins(currentPins => currentPins.map(pin => {
      if (pin.id === pinId) {
        const updatedPin = { ...pin, ...updates }
        
        // Update graphic if color changed
        if (updates.color && pin.graphic) {
          const newSymbol = new PictureMarkerSymbol({
            url: createPinSvg(updates.color),
            width: '24px',
            height: '32px',
            yoffset: '16px'
          })
          pin.graphic.symbol = newSymbol
        }
        
        // Update label if name changed
        if (updates.name && pin.labelGraphic) {
          const newTextSymbol = new TextSymbol({
            text: updates.name,
            color: '#000000',
            haloColor: '#ffffff',
            haloSize: '2px',
            font: {
              size: 12,
              family: 'Arial',
              weight: 'bold'
            },
            yoffset: -20
          })
          pin.labelGraphic.symbol = newTextSymbol
        }
        
        return updatedPin
      }
      return pin
    }))
  }

  const copyCoordinates = (pin: Pin) => {
    const coords = `${pin.y}, ${pin.x}`
    navigator.clipboard.writeText(coords)
    setShowCoords(`Copied: ${coords}`)
    setTimeout(() => setShowCoords(''), 2000)
  }

  const onActiveViewChange = (jmv: JimuMapView) => {
    if (jmv) {
      setJimuMapView(jmv)
    }
  }

  return (
    <div className="widget-drop-pin" style={{ padding: '10px' }}>
      <div style={{ marginBottom: '10px' }}>
        <Button 
          size="sm" 
          type={isActive ? 'primary' : 'secondary'}
          onClick={activeMapView}
          disabled={!jimuMapView}
        >
          {isActive ? 'Stop Dropping' : 'Drop Pin'}
        </Button>
      </div>

      {showCoords && (
        <Alert type="success" size="small" style={{ marginBottom: '10px' }}>
          {showCoords}
        </Alert>
      )}

      <div style={{ maxHeight: '300px', overflowY: 'auto' }}>
        {pins.map(pin => (
          <div key={pin.id} style={{ 
            border: '1px solid #ccc', 
            padding: '8px', 
            marginBottom: '8px', 
            borderRadius: '4px' 
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <input
                type="text"
                value={pin.name}
                onChange={(e) => updatePin(pin.id, { name: e.target.value })}
                style={{ marginRight: '8px', flex: 1 }}
              />
              <input
                type="color"
                value={pin.color}
                onChange={(e) => updatePin(pin.id, { color: e.target.value })}
                style={{ width: '30px', height: '25px', marginRight: '8px' }}
              />
            </div>
            
            <div style={{ fontSize: '12px', color: '#666', margin: '4px 0' }}>
              {pin.y.toFixed(6)}, {pin.x.toFixed(6)}
            </div>
            
            <div style={{ display: 'flex', gap: '4px' }}>
              <Button size="sm" onClick={() => copyCoordinates(pin)}>
                Copy Coords
              </Button>
              <Button size="sm" type="danger" onClick={() => removePin(pin.id)}>
                Remove
              </Button>
            </div>
          </div>
        ))}
      </div>

      {pins.length === 0 && (
        <div style={{ textAlign: 'center', color: '#666', fontStyle: 'italic' }}>
          Click "Drop Pin" to add pins to the map.<br/>
          <small>Drag pins to move them around!</small>
        </div>
      )}

      <JimuMapViewComponent 
        useMapWidgetId={props.useMapWidgetIds?.[0]} 
        onActiveViewChange={onActiveViewChange}
      />
    </div>
  )
}

export default Widget
