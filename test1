// YENİ METOD - Polygon height'ları profile'a ekle ve chart için hazırla
  addPolygonHeights = async (profileData: any): Promise<any> => {
    if (!profileData || !profileData.lines || profileData.lines.length === 0) {
      return profileData
    }

    try {
      // Profile line geometry'sini al
      const profileGeometry = this._defaultViewModel?.input?.geometry
      if (!profileGeometry) {
        return profileData
      }

      // FeatureLayer instance oluştur
      const featureLayer = new FeatureLayer({
        url: this.state.polygonHeightLayerUrl
      })

      // Layer yüklenene kadar bekle
      await featureLayer.load()

      // Query parametreleri
      const query = featureLayer.createQuery()
      query.geometry = profileGeometry
      query.spatialRelationship = 'intersects'
      query.returnGeometry = true
      query.outFields = ['usid', 'height_ft']
      query.returnZ = true

      const queryResult = await featureLayer.queryFeatures(query)
      
      if (queryResult.features.length === 0) {
        console.log('No intersecting towers found')
        return profileData
      }

      console.log(`Found towers from ${queryResult.features.length} polygons`)

      // USID bazlı height mapping oluştur
      const usidHeightMap = new Map()
      queryResult.features.forEach((feature) => {
        const usid = feature.attributes.usid
        const heightFt = feature.attributes.height_ft
        
        if (usid && heightFt && !isNaN(heightFt) && !usidHeightMap.has(usid)) {
          usidHeightMap.set(usid, heightFt)
          console.log(`Tower found - USID: ${usid}, Height: ${heightFt} ft`)
        }
      })

      // Profile data'yı modify et
      const modifiedProfileData = JSON.parse(JSON.stringify(profileData))
      
      // Orijinal terrain line'ını koru
      const originalTerrainLine = JSON.parse(JSON.stringify(modifiedProfileData.lines[0]))
      
      // Tower'lı yeni line oluştur
      const towerLine = JSON.parse(JSON.stringify(originalTerrainLine))
      towerLine.id = 'tower-elevation-line'
      
      if (towerLine.samples) {
        const samples = towerLine.samples
        const sampleUsidMap = new Map()
        
        // Her sample point için touched USID'leri bul
        samples.forEach((sample, sampleIndex) => {
          const samplePoint = new Point({
            x: sample.x,
            y: sample.y,
            spatialReference: profileGeometry.spatialReference
          })

          const touchedUsids = new Set()
          queryResult.features.forEach((feature) => {
            if (geometryEngine.intersects(samplePoint, feature.geometry)) {
              const usid = feature.attributes.usid
              if (usid && usidHeightMap.has(usid)) {
                touchedUsids.add(usid)
              }
            }
          })
          sampleUsidMap.set(sampleIndex, touchedUsids)
        })

        // Tower line'a height'ları ekle
        let towersAdded = 0
        samples.forEach((sample, sampleIndex) => {
          const touchedUsids = sampleUsidMap.get(sampleIndex)
          
          if (touchedUsids && touchedUsids.size > 0) {
            touchedUsids.forEach((usid) => {
              const heightFt = usidHeightMap.get(usid)
              if (heightFt && !isNaN(heightFt)) {
                const heightInMeters = heightFt * 0.3048
                sample.elevation = sample.elevation + heightInMeters
                towersAdded++
              }
            })
          }
        })

        console.log(`Added ${towersAdded} tower heights to elevation profile`)
      }

      // İki line'ı da profile'a ekle
      modifiedProfileData.lines = [
        originalTerrainLine,  // Normal terrain
        towerLine            // Terrain + Towers
      ]

      return modifiedProfileData
    } catch (error) {
      console.error('Error adding tower heights:', error)
      return profileData
    }
  }
