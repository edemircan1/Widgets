import { React, AllWidgetProps } from 'jimu-core';
import { BaseWidget } from 'jimu-core';
import FeatureLayer from 'esri/layers/FeatureLayer';
import { JimuMapViewComponent, JimuMapView } from 'jimu-arcgis';
import { NumericInput, Button, Label } from 'jimu-ui';

interface State {
  showTestUI: boolean;
  baseSize: number;
  zoomFactor: number;
  minSize: number;
  maxSize: number;
}

export default class AutoPolygonSizer extends BaseWidget<AllWidgetProps<any>, State> {
  
  private featureLayer: FeatureLayer = null;
  private jimuMapView: JimuMapView = null;
  
  // URL'i buradan kontrol et - KENDƒ∞ URL'ƒ∞Nƒ∞ YAZMANIZ GEREK
  private readonly FEATURE_LAYER_URL = "https://services.arcgis.com/your-service-url/FeatureServer/0";

  constructor(props) {
    super(props);
    
    this.state = {
      showTestUI: true, // Test i√ßin UI g√∂ster
      baseSize: 2,
      zoomFactor: 0.3,  // D√º≈ü√ºk deƒüer = yumu≈üak ge√ßi≈ü
      minSize: 0.5,
      maxSize: 6
    };
  }

  // MapView hazƒ±r olduƒüunda tetiklenen callback
  activeViewChangeHandler = (jimuMapView: JimuMapView) => {
    console.log('üó∫Ô∏è MapView ready:', jimuMapView);
    
    if (jimuMapView) {
      this.jimuMapView = jimuMapView;
      
      jimuMapView.whenJimuMapViewLoaded().then(() => {
        console.log('‚úÖ MapView fully loaded');
        this.loadFeatureLayer();
      });
    }
  }

  loadFeatureLayer = async () => {
    try {
      console.log('üîÑ Loading feature layer from:', this.FEATURE_LAYER_URL);
      
      this.featureLayer = new FeatureLayer({
        url: this.FEATURE_LAYER_URL,
        title: "Auto-sized Polygons",
        renderer: this.createInitialRenderer()
      });

      console.log('‚úÖ Feature layer created:', this.featureLayer);
      
      if (this.jimuMapView?.view) {
        console.log('‚úÖ Adding layer to map...');
        
        this.jimuMapView.view.map.add(this.featureLayer);
        console.log('‚úÖ Layer added to map');
        
        this.setupZoomListener(this.jimuMapView.view);
        
        // ƒ∞lk boyut ayarƒ±nƒ± yap
        const currentZoom = this.jimuMapView.view.zoom;
        console.log('üîç Initial zoom level:', currentZoom);
        this.adjustPolygonSize(currentZoom);
      }
      
    } catch (error) {
      console.error('‚ùå Feature Layer loading error:', error);
    }
  }

  createInitialRenderer = () => {
    const renderer = {
      type: "simple",
      symbol: {
        type: "simple-fill",
        color: [51, 150, 204, 0.4],
        outline: {
          color: [51, 150, 204, 1],
          width: this.state.baseSize,
          style: "solid"
        }
      }
    };
    
    console.log('üé® Created initial renderer:', renderer);
    return renderer;
  }

  setupZoomListener = (mapView: any) => {
    console.log('üëÇ Setting up zoom listener...');
    console.log('üîç Current zoom level:', mapView.zoom);
    
    mapView.watch("zoom", (newZoom: number, oldZoom: number) => {
      console.log(`üîç ZOOM CHANGED: ${oldZoom} ‚Üí ${newZoom}`);
      this.adjustPolygonSize(newZoom);
    });
    
    console.log('‚úÖ Zoom listener setup complete');
  }

  adjustPolygonSize = (zoomLevel: number) => {
    console.log('üîß === ADJUSTING POLYGON SIZE ===');
    console.log('üîç Zoom level:', zoomLevel);
    
    if (!this.featureLayer) {
      console.log('‚ùå No feature layer found!');
      return;
    }

    const { baseSize, zoomFactor, minSize, maxSize } = this.state;
    
    // D√úZELTME: Zoom IN = objeler k√º√ß√ºk, Zoom OUT = objeler b√ºy√ºk
    // Y√ºksek zoom (yakƒ±n) = k√º√ß√ºk objeler
    // D√º≈ü√ºk zoom (uzak) = b√ºy√ºk objeler
    let calculatedSize = baseSize * Math.pow(2, (10 - zoomLevel) * zoomFactor);
    
    // Min/max limitleri uygula
    calculatedSize = Math.max(minSize, Math.min(maxSize, calculatedSize));
    
    console.log(`üìè Zoom: ${zoomLevel} ‚Üí Size: ${calculatedSize.toFixed(2)}`);
    console.log(`üìê Formula: ${baseSize} * 2^((10-${zoomLevel}) * ${zoomFactor})`);
    
    const currentRenderer = this.featureLayer.renderer;
    
    if (currentRenderer) {
      const newRenderer = currentRenderer.clone();
      
      if (newRenderer.symbol && newRenderer.symbol.outline) {
        const oldWidth = newRenderer.symbol.outline.width;
        newRenderer.symbol.outline.width = calculatedSize;
        
        console.log(`üìè Outline width: ${oldWidth.toFixed(2)} ‚Üí ${calculatedSize.toFixed(2)}`);
        
        this.featureLayer.renderer = newRenderer;
        console.log('‚úÖ Renderer updated successfully');
      }
    }
  }

  // Test UI Event Handlers
  onParameterChange = (param: keyof State, value: number) => {
    this.setState({ [param]: value } as any, () => {
      // Parametreler deƒüi≈üince hemen g√ºncelle
      if (this.jimuMapView?.view) {
        this.adjustPolygonSize(this.jimuMapView.view.zoom);
      }
    });
  }

  onApplySettings = () => {
    if (this.jimuMapView?.view) {
      console.log('üîÑ Applying new settings:', this.state);
      this.adjustPolygonSize(this.jimuMapView.view.zoom);
    }
  }

  onHideTestUI = () => {
    this.setState({ showTestUI: false });
  }

  render() {
    if (!this.props.useMapWidgetIds || this.props.useMapWidgetIds.length === 0) {
      console.log('‚ùå No map widget selected');
      return <div>Please select a map in widget settings</div>;
    }

    return (
      <div style={{ width: '100%', height: '100%', position: 'relative' }}>
        {/* Invisible MapView bile≈üeni */}
        <div style={{ position: 'absolute', visibility: 'hidden', width: '100%', height: '100%' }}>
          <JimuMapViewComponent 
            useMapWidgetId={this.props.useMapWidgetIds[0]}
            onActiveViewChange={this.activeViewChangeHandler}
          />
        </div>

        {/* Test UI */}
        {this.state.showTestUI && (
          <div style={{
            position: 'absolute',
            top: '10px',
            right: '10px',
            background: 'white',
            padding: '15px',
            borderRadius: '5px',
            boxShadow: '0 2px 10px rgba(0,0,0,0.3)',
            zIndex: 1000,
            minWidth: '250px'
          }}>
            <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>
              Polygon Size Test Controls
            </div>
            
            <div style={{ marginBottom: '10px' }}>
              <Label>Base Size: {this.state.baseSize}</Label>
              <NumericInput 
                value={this.state.baseSize}
                onChange={(value) => this.onParameterChange('baseSize', value)}
                min={0.1}
                max={10}
                step={0.1}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ marginBottom: '10px' }}>
              <Label>Zoom Factor: {this.state.zoomFactor}</Label>
              <NumericInput 
                value={this.state.zoomFactor}
                onChange={(value) => this.onParameterChange('zoomFactor', value)}
                min={0.1}
                max={1}
                step={0.05}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ marginBottom: '10px' }}>
              <Label>Min Size: {this.state.minSize}</Label>
              <NumericInput 
                value={this.state.minSize}
                onChange={(value) => this.onParameterChange('minSize', value)}
                min={0.1}
                max={5}
                step={0.1}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ marginBottom: '15px' }}>
              <Label>Max Size: {this.state.maxSize}</Label>
              <NumericInput 
                value={this.state.maxSize}
                onChange={(value) => this.onParameterChange('maxSize', value)}
                min={1}
                max={20}
                step={0.5}
                style={{ width: '100%' }}
              />
            </div>

            <div style={{ display: 'flex', gap: '10px' }}>
              <Button 
                onClick={this.onApplySettings}
                size="sm"
                type="primary"
              >
                Apply
              </Button>
              <Button 
                onClick={this.onHideTestUI}
                size="sm"
                type="secondary"
              >
                Hide Controls
              </Button>
            </div>

            {this.jimuMapView?.view && (
              <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
                Current Zoom: {this.jimuMapView.view.zoom?.toFixed(1)}
              </div>
            )}
          </div>
        )}
      </div>
    );
  }
}