/** @jsx jsx */
import { React, jsx, AllWidgetProps } from 'jimu-core';
import { JimuMapView, JimuMapViewComponent } from 'jimu-arcgis';

interface State {
  activeLayer: any;
  activeSublayer: any;
  activeField: string;
  minValue: number;
  maxValue: number;
  currentMin: number;
  currentMax: number;
}

export default class Widget extends React.PureComponent<AllWidgetProps<any>, State> {
  private mapView: JimuMapView = null;

  constructor(props) {
    super(props);
    this.state = {
      activeLayer: null,
      activeSublayer: null,
      activeField: '',
      minValue: -120,
      maxValue: -40,
      currentMin: -120,
      currentMax: -40
    };
  }

  onActiveViewChange = (jimuMapView: JimuMapView) => {
    if (!jimuMapView) return;
    
    this.mapView = jimuMapView;

    // Layer visibility deÄŸiÅŸimlerini izle
    const watchLayers = () => {
      jimuMapView.view.map.allLayers.forEach((layer: any) => {
        layer.watch('visible', () => {
          setTimeout(() => this.checkActiveLayers(), 100);
        });

        if (layer.type === 'map-image' && layer.allSublayers) {
          layer.allSublayers.forEach((sublayer: any) => {
            sublayer.watch('visible', () => {
              setTimeout(() => this.checkActiveLayers(), 100);
            });
          });
        }
      });
    };

    watchLayers();
    
    jimuMapView.view.map.allLayers.on('change', () => {
      watchLayers();
      setTimeout(() => this.checkActiveLayers(), 100);
    });

    this.checkActiveLayers();
  };

  checkActiveLayers = () => {
    if (!this.mapView) return;

    const layers = this.mapView.view.map.allLayers;
    let lastFound = null;

    // TÃ¼m layer'larÄ± tara
    layers.forEach((layer: any) => {
      if (!layer.visible) return;

      // MapImageLayer
      if (layer.type === 'map-image' && layer.allSublayers) {
        layer.allSublayers.forEach((sublayer: any) => {
          if (!sublayer.visible) return;
          
          const title = (sublayer.title || '').toUpperCase();
          
          if (title.includes('RSRP')) {
            lastFound = { sublayer, parent: layer, field: 'RSRP' };
          } else if (title.includes('RSRQ')) {
            lastFound = { sublayer, parent: layer, field: 'RSRQ' };
          } else if (title.includes('SNR')) {
            lastFound = { sublayer, parent: layer, field: 'SNR' };
          }
        });
      }
      // FeatureLayer
      else if (layer.type === 'feature' && layer.fields) {
        for (const field of layer.fields) {
          const fname = field.name.toUpperCase();
          if (fname.includes('RSRP')) {
            lastFound = { sublayer: layer, parent: null, field: field.name };
            break;
          } else if (fname.includes('RSRQ')) {
            lastFound = { sublayer: layer, parent: null, field: field.name };
            break;
          } else if (fname.includes('SNR')) {
            lastFound = { sublayer: layer, parent: null, field: field.name };
            break;
          }
        }
      }
    });

    if (lastFound) {
      this.setActiveLayer(lastFound.sublayer, lastFound.field, lastFound.parent);
    } else {
      this.clearActiveLayer();
    }
  };

  setActiveLayer = (layer: any, fieldName: string, parentLayer: any) => {
    let min = -120, max = -40;
    const fieldUpper = fieldName.toUpperCase();

    if (fieldUpper.includes('RSRQ')) {
      min = -20;
      max = -3;
    } else if (fieldUpper.includes('SNR')) {
      min = -10;
      max = 30;
    }

    // Ã–nceki layer'Ä±n filtresini temizle
    const oldTarget = this.state.activeSublayer || this.state.activeLayer;
    if (oldTarget && oldTarget !== layer && oldTarget.definitionExpression !== undefined) {
      oldTarget.definitionExpression = null;
    }

    console.log('Active:', fieldName, 'Range:', min, 'to', max);

    this.setState({
      activeLayer: parentLayer || layer,
      activeSublayer: layer,
      activeField: fieldName,
      minValue: min,
      maxValue: max,
      currentMin: min,
      currentMax: max
    }, () => {
      // Filter'Ä± hemen uygula (tÃ¼m aralÄ±k)
      this.applyFilter();
    });
  };

  clearActiveLayer = () => {
    const oldTarget = this.state.activeSublayer || this.state.activeLayer;
    if (oldTarget && oldTarget.definitionExpression !== undefined) {
      oldTarget.definitionExpression = null;
    }

    this.setState({
      activeLayer: null,
      activeSublayer: null,
      activeField: ''
    });
  };

  onMinChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newMin = parseFloat(e.target.value);
    this.setState({ currentMin: newMin }, () => {
      this.applyFilter();
    });
  };

  onMaxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newMax = parseFloat(e.target.value);
    this.setState({ currentMax: newMax }, () => {
      this.applyFilter();
    });
  };

  applyFilter = () => {
    const { activeSublayer, activeLayer, activeField, currentMin, currentMax } = this.state;
    const targetLayer = activeSublayer || activeLayer;

    if (!targetLayer || !activeField) return;

    const query = `${activeField} >= ${currentMin} AND ${activeField} <= ${currentMax}`;
    
    console.log('Filter:', query);

    if (targetLayer.definitionExpression !== undefined) {
      targetLayer.definitionExpression = query;
    }

    if (activeLayer && activeLayer.refresh) {
      activeLayer.refresh();
    }
  };

  render() {
    const { activeField, minValue, maxValue, currentMin, currentMax } = this.state;

    return (
      <div style={{ padding: '15px', width: '100%', height: '100%', backgroundColor: '#fff' }}>
        <JimuMapViewComponent
          useMapWidgetId={this.props.useMapWidgetIds?.[0]}
          onActiveViewChange={this.onActiveViewChange}
        />

        {activeField ? (
          <div style={{ marginTop: '20px' }}>
            <h3 style={{ margin: '0 0 15px 0', fontSize: '18px', fontWeight: 'bold' }}>
              {activeField} Filter
            </h3>

            {/* MIN SLIDER */}
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', fontWeight: '600' }}>
                Min: {currentMin}
              </label>
              <input
                type="range"
                min={minValue}
                max={maxValue}
                step={1}
                value={currentMin}
                onChange={this.onMinChange}
                style={{
                  width: '100%',
                  height: '8px',
                  borderRadius: '5px',
                  outline: 'none',
                  cursor: 'pointer'
                }}
              />
            </div>

            {/* MAX SLIDER */}
            <div style={{ marginBottom: '20px' }}>
              <label style={{ display: 'block', marginBottom: '5px', fontSize: '14px', fontWeight: '600' }}>
                Max: {currentMax}
              </label>
              <input
                type="range"
                min={minValue}
                max={maxValue}
                step={1}
                value={currentMax}
                onChange={this.onMaxChange}
                style={{
                  width: '100%',
                  height: '8px',
                  borderRadius: '5px',
                  outline: 'none',
                  cursor: 'pointer'
                }}
              />
            </div>

            <div style={{ 
              padding: '10px', 
              backgroundColor: '#f0f0f0', 
              borderRadius: '5px',
              fontSize: '13px'
            }}>
              ðŸ“Š AralÄ±k: <strong>{minValue}</strong> ile <strong>{maxValue}</strong> arasÄ±<br/>
              ðŸŽ¯ Filtre: <strong>{currentMin}</strong> - <strong>{currentMax}</strong>
            </div>
          </div>
        ) : (
          <div style={{ marginTop: '30px', textAlign: 'center', color: '#999' }}>
            <p style={{ fontSize: '14px' }}>
              ðŸ“¡ RSRP, RSRQ veya SNR katmanÄ±nÄ± aktif edin
            </p>
          </div>
        )}
      </div>
    );
  }
}