/** @jsx jsx */
import { React, jsx, AllWidgetProps } from 'jimu-core';
import { JimuMapView, JimuMapViewComponent } from 'jimu-arcgis';
import { Slider } from 'jimu-ui';

interface State {
  activeLayer: any;
  activeSublayer: any;
  activeField: string;
  minValue: number;
  maxValue: number;
  currentMin: number;
  currentMax: number;
}

export default class Widget extends React.PureComponent<AllWidgetProps<any>, State> {
  private mapView: JimuMapView = null;

  constructor(props) {
    super(props);
    this.state = {
      activeLayer: null,
      activeSublayer: null,
      activeField: '',
      minValue: -120,
      maxValue: -40,
      currentMin: -120,
      currentMax: -40
    };
  }

  // MapView hazır olduğunda
  onActiveViewChange = (jimuMapView: JimuMapView) => {
    if (!jimuMapView) return;
    
    this.mapView = jimuMapView;

    // Layer'lar değiştiğinde dinle
    jimuMapView.view.map.allLayers.on('change', () => {
      this.checkActiveLayers();
    });

    // Layer visibility değiştiğinde dinle
    jimuMapView.view.map.allLayers.forEach((layer: any) => {
      layer.watch('visible', () => {
        this.checkActiveLayers();
      });

      // MapImageLayer sublayer'larını izle
      if (layer.type === 'map-image' && layer.allSublayers) {
        layer.allSublayers.forEach((sublayer: any) => {
          sublayer.watch('visible', () => {
            this.checkActiveLayers();
          });
        });
      }
    });

    // İlk yüklemede kontrol et
    this.checkActiveLayers();
  };

  // Aktif layer'ları kontrol et
  checkActiveLayers = () => {
    if (!this.mapView) return;

    const layers = this.mapView.view.map.allLayers;
    let foundLayer = false;

    layers.forEach((layer: any) => {
      console.log('Layer:', layer.title, 'Type:', layer.type, 'Visible:', layer.visible);

      if (layer.visible) {
        // MapImageLayer için sublayer kontrolü
        if (layer.type === 'map-image' && layer.allSublayers) {
          layer.allSublayers.forEach((sublayer: any) => {
            console.log('Sublayer:', sublayer.title, 'Visible:', sublayer.visible);
            
            if (sublayer.visible && !foundLayer) {
              const detected = this.checkSublayerFields(sublayer, layer);
              if (detected) foundLayer = true;
            }
          });
        }
        // FeatureLayer için direkt kontrol
        else if (layer.type === 'feature' && !foundLayer) {
          const detected = this.checkFieldsInLayer(layer);
          if (detected) foundLayer = true;
        }
      }
    });

    // Hiç uygun layer bulunamadıysa state'i temizle
    if (!foundLayer) {
      this.setState({
        activeLayer: null,
        activeSublayer: null,
        activeField: ''
      });
    }
  };

  // Sublayer field kontrolü
  checkSublayerFields = (sublayer: any, parentLayer: any): boolean => {
    const title = sublayer.title?.toUpperCase() || '';

    // Sublayer adında RSRP/RSRQ/SNR var mı?
    if (title.includes('RSRP')) {
      this.setActiveLayer(sublayer, 'RSRP', parentLayer);
      return true;
    } else if (title.includes('RSRQ')) {
      this.setActiveLayer(sublayer, 'RSRQ', parentLayer);
      return true;
    } else if (title.includes('SNR')) {
      this.setActiveLayer(sublayer, 'SNR', parentLayer);
      return true;
    }

    return false;
  };

  // Layer'daki field'ları kontrol et
  checkFieldsInLayer = (layer: any): boolean => {
    if (!layer.fields) return false;

    for (const field of layer.fields) {
      const fieldName = field.name.toUpperCase();

      if (fieldName.includes('RSRP')) {
        this.setActiveLayer(layer, field.name, null);
        return true;
      } else if (fieldName.includes('RSRQ')) {
        this.setActiveLayer(layer, field.name, null);
        return true;
      } else if (fieldName.includes('SNR')) {
        this.setActiveLayer(layer, field.name, null);
        return true;
      }
    }

    return false;
  };

  // Aktif layer'ı ayarla
  setActiveLayer = (layer: any, fieldName: string, parentLayer?: any) => {
    let min = -120, max = -40;

    const fieldUpper = fieldName.toUpperCase();

    if (fieldUpper.includes('RSRQ')) {
      min = -20;
      max = -3;
    } else if (fieldUpper.includes('SNR')) {
      min = -10;
      max = 30;
    }

    console.log('Active layer set:', fieldName, 'Parent:', parentLayer?.title);

    this.setState({
      activeLayer: parentLayer || layer,
      activeSublayer: parentLayer ? layer : null,
      activeField: fieldName,
      minValue: min,
      maxValue: max,
      currentMin: min,
      currentMax: max
    });
  };

  // Slider değiştiğinde
  onSliderChange = (value: number[]) => {
    this.setState({
      currentMin: value[0],
      currentMax: value[1]
    }, () => {
      this.applyFilter();
    });
  };

  // Filtreyi uygula
  applyFilter = () => {
    const { activeLayer, activeSublayer, activeField, currentMin, currentMax } = this.state;

    const targetLayer = activeSublayer || activeLayer;

    if (!targetLayer || !activeField) {
      console.log('No target layer or field');
      return;
    }

    const query = `${activeField} >= ${currentMin} AND ${activeField} <= ${currentMax}`;
    
    console.log('Applying filter:', query, 'to', targetLayer.title);

    // DefinitionExpression uygula
    if (targetLayer.definitionExpression !== undefined) {
      targetLayer.definitionExpression = query;
    }

    // Layer'ı refresh et
    if (activeLayer.refresh) {
      activeLayer.refresh();
    }
  };

  render() {
    const { activeField, minValue, maxValue, currentMin, currentMax } = this.state;

    return (
      <div className="widget-rsrp-filter" style={{ padding: '20px', width: '100%', height: '100%' }}>
        <JimuMapViewComponent
          useMapWidgetId={this.props.useMapWidgetIds?.[0]}
          onActiveViewChange={this.onActiveViewChange}
        />

        {activeField ? (
          <div style={{ marginTop: '20px' }}>
            <h4 style={{ fontSize: '16px', marginBottom: '10px' }}>
              {activeField} Filtresi
            </h4>
            <p style={{ fontSize: '14px', marginBottom: '15px' }}>
              Aralık: <strong>{currentMin}</strong> - <strong>{currentMax}</strong>
            </p>

            <Slider
              range
              min={minValue}
              max={maxValue}
              value={[currentMin, currentMax]}
              onChange={this.onSliderChange}
              style={{ width: '100%' }}
            />
          </div>
        ) : (
          <div style={{ marginTop: '20px', textAlign: 'center', color: '#666' }}>
            <p>RSRP, RSRQ veya SNR içeren bir layer aktif edin</p>
          </div>
        )}
      </div>
    );
  }
}